{"version":3,"sources":["recycling.js","refuse.js","App.js","serviceWorker.js","index.js"],"names":["Recycling","nextdate","this","props","date","getDate","getMonth","getFullYear","className","Component","Refuse","App","state","recycleDate","Date","refuseDate","nextRecycleDate","nextRefuseDate","isRecycle","isRefuse","getDates","today","setState","findNextDates","console","log","showRecycle","showRefuse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAmBeA,G,6KAfP,IAAIC,EAAWC,KAAKC,MAAMC,KACtBA,EAAOH,EAASI,UAAY,KAAOJ,EAASK,WAAW,GAAK,IAAML,EAASM,cAC/E,OACI,yBAAKC,UAAU,8BACX,6BACI,2DAAgC,2BAAIJ,GAApC,KACA,6BACA,qCAAU,wCAAV,KACA,sD,GAVIK,cCmBTC,E,uKAjBP,IAAIT,EAAWC,KAAKC,MAAMC,KACtBA,EAAOH,EAASI,UAAY,KAAOJ,EAASK,WAAW,GAAK,IAAML,EAASM,cAC/E,OACI,yBAAKC,UAAU,6BACX,6BACA,6BACI,2DAAgC,2BAAIJ,GAApC,KACA,6BACA,qCAAU,qCAAV,QAA4B,2CAA5B,KACA,uD,GAXCK,aCmDNE,E,4MA/CbC,MAAQ,CACNR,KAAM,GACNS,YAAa,IAAIC,KAAK,cACtBC,WAAY,IAAID,KAAK,cACrBE,gBAAiB,GACjBC,eAAgB,GAChBC,WAAW,EACXC,UAAU,G,EAOZC,SAAW,WACT,IAAIC,EAAQ,IAAIP,KAChB,EAAKQ,SAAS,CAAElB,KAAMiB,IACtB,EAAKE,cAAcF,EAAO,EAAKT,MAAMC,YAAa,EAAKD,MAAMG,a,EAG/DQ,cAAgB,SAACF,EAAOR,EAAaE,GAC/BM,GAASR,EACX,EAAKS,SAAS,CAAEJ,WAAW,EAAMF,gBAAiBH,IAEzCQ,GAASN,EAClB,EAAKO,SAAS,CAAEH,UAAU,EAAOF,eAAgBF,KAGjDS,QAAQC,IAAI,oBACZZ,EAAc,IAAIC,KAAKD,EAAc,SACrCE,EAAa,IAAID,KAAKC,EAAa,SACnC,EAAKQ,cAAcV,EAAaE,K,kEApBlCb,KAAKkB,a,+BAyBL,IAAIM,EAAcxB,KAAKU,MAAMM,UAAY,kBAAC,EAAD,CAAWd,KAAMF,KAAKU,MAAMI,kBAAqB,KACtFW,EAAazB,KAAKU,MAAMO,SAAW,kBAAC,EAAD,CAAQf,KAAMF,KAAKU,MAAMK,iBAAoB,KACpF,OACE,6BACGS,EACAC,O,GA1CSlB,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.a045c3a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Recycling extends Component {\n    render() {\n        let nextdate = this.props.date;\n        let date = nextdate.getDate() + '/' + (nextdate.getMonth()+1) + '/' + nextdate.getFullYear();\n        return (\n            <div className=\"collection recycle fade-in\">\n                <div>\n                    <h3>The next collection date is <b>{date}</b>.</h3>\n                    <br />\n                    <h3>It is <b>recycling</b>.</h3>\n                    <h6>(and food waste)</h6>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Recycling;","import React, { Component } from 'react';\n\nclass Refuse extends Component {\n    render() {\n        let nextdate = this.props.date;\n        let date = nextdate.getDate() + '/' + (nextdate.getMonth()+1) + '/' + nextdate.getFullYear();\n        return (\n            <div className=\"collection refuse fade-in\">\n                <div>\n                <div>\n                    <h3>The next collection date is <b>{date}</b>.</h3>\n                    <br />\n                    <h3>It is <b>refuse</b> and <b>garden waste</b>.</h3>\n                    <h6>(and food waste)</h6>\n                </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Refuse;","import React, { Component } from 'react';\nimport './App.css';\nimport Recycling from './recycling.js';\nimport Refuse from './refuse.js';\n\nclass App extends Component {\n  state = {\n    date: '',\n    recycleDate: new Date(\"2020-09-25\"),\n    refuseDate: new Date(\"2020-10-02\"),\n    nextRecycleDate: '',\n    nextRefuseDate: '',\n    isRecycle: false,\n    isRefuse: false,\n  }\n\n  componentDidMount() {\n    this.getDates();\n  }\n\n  getDates = () => {\n    var today = new Date();\n    this.setState({ date: today });\n    this.findNextDates(today, this.state.recycleDate, this.state.refuseDate);\n  }\n\n  findNextDates = (today, recycleDate, refuseDate) => {\n    if (today <= recycleDate) {\n      this.setState({ isRecycle: true, nextRecycleDate: recycleDate});\n      return;\n    } else if (today <= refuseDate) {\n      this.setState({ isRefuse: true , nextRefuseDate: refuseDate});\n      return;\n    } else {\n      console.log(\"Increasing dates\");\n      recycleDate = new Date(recycleDate + 12096e5);\n      refuseDate = new Date(refuseDate + 12096e5);\n      this.findNextDates(recycleDate, refuseDate);\n    }\n  }\n\n  render() {\n    let showRecycle = this.state.isRecycle ? <Recycling date={this.state.nextRecycleDate}/> : null;\n    let showRefuse = this.state.isRefuse ? <Refuse date={this.state.nextRefuseDate}/> : null;\n    return (\n      <div>\n        {showRecycle}\n        {showRefuse}\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}